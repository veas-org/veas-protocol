name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build package
        run: pnpm build

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Auto-detect from commit messages
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" 2>/dev/null || git log --pretty=format:"%s")
            
            if echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?!:"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?:"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "bump_type=${BUMP_TYPE}" >> $GITHUB_OUTPUT
          echo "Detected version bump type: ${BUMP_TYPE}"

      - name: Bump version
        id: bump
        run: |
          npm version ${{ steps.version.outputs.bump_type }} --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "new_version=${VERSION}" >> $GITHUB_OUTPUT
          echo "New version: ${VERSION}"

      - name: Update changelog
        run: |
          VERSION="${{ steps.bump.outputs.new_version }}"
          DATE=$(date +"%Y-%m-%d")
          
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Add new version entry
          TEMP_FILE=$(mktemp)
          echo "## [${VERSION}] - ${DATE}" > $TEMP_FILE
          echo "" >> $TEMP_FILE
          
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" --reverse)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --reverse)
          fi
          
          # Categorize commits
          echo "### Changes" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "$COMMITS" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          
          # Prepend to existing changelog
          cat CHANGELOG.md >> $TEMP_FILE
          mv $TEMP_FILE CHANGELOG.md

      - name: Commit changes
        run: |
          git add package.json pnpm-lock.yaml CHANGELOG.md
          git commit -m "chore: release v${{ steps.bump.outputs.new_version }}"

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"
          git push origin main --follow-tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: Release v${{ steps.bump.outputs.new_version }}
          body: |
            ## What's Changed
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish success notification
        if: success()
        run: |
          echo "‚úÖ Successfully published @veas/protocol@${{ steps.bump.outputs.new_version }} to NPM"
          echo "üì¶ Package URL: https://www.npmjs.com/package/@veas/protocol"
          echo "üè∑Ô∏è Git Tag: v${{ steps.bump.outputs.new_version }}"

      - name: Publish failure notification
        if: failure()
        run: |
          echo "‚ùå Failed to publish @veas/protocol@${{ steps.bump.outputs.new_version }}"
          echo "Please check the logs for more information"